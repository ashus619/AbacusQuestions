# -*- coding: utf-8 -*-
"""Abacus Questionnaire.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11x2Tmk6sRytQ5AgC374JGoxTXgB8z4T-
"""

import streamlit as st
import random
import uuid

# Function to generate a question based on the number of digits
def generate_question(digits):
    num1 = random.randint(10**(digits-1), 10**digits - 1)  # Random number with specified digits
    num2 = random.randint(10**(digits-1), 10**digits - 1)
    operation = random.choice(['+', '-'])
    question = f"{num1} {operation} {num2}"
    answer = eval(question)
    return question, answer

# Teacher's Interface: Decide Test Parameters
st.title("Teacher's Interface: Abacus Test Parameters")

# Number of questions
num_questions = st.number_input("Number of Questions", min_value=1, max_value=50, value=10)

# Number of digits in the questions
num_digits = st.number_input("Number of Digits in the Questions", min_value=1, max_value=3, value=2)

# Button to generate the test
if st.button("Generate Test"):
    # Generate a unique test ID for the student
    test_id = str(uuid.uuid4())

    # Save test parameters in session_state (or any persistent storage)
    st.session_state[test_id] = {
        'num_questions': num_questions,
        'num_digits': num_digits,
    }

    # Generate the questions based on the input parameters
    questions = [generate_question(num_digits) for _ in range(num_questions)]
    st.session_state[test_id]['questions'] = questions

    # Create a link that can be shared with the student
    test_link = f"/?test_id={test_id}"

    # Show the test link for the teacher to copy and share
    st.write(f"Test generated! Share this link with the student to take the test: {st.request.host_url}{test_link}")

# ------------------------------------------------------------

# Student's Interface: Answering the Test

test_id = st.experimental_get_query_params().get("test_id", [None])[0]

if test_id and test_id in st.session_state:
    test_data = st.session_state[test_id]

    st.title(f"Student's Test - {test_id}")

    # Display all questions for the student
    student_answers = {}

    for idx, (question, correct_answer) in enumerate(test_data['questions']):
        user_answer = st.radio(f"Question {idx + 1}: {question}",
                               options=[correct_answer - 1, correct_answer, correct_answer + 1],
                               key=f"question_{idx}",
                               index=None)
        student_answers[f"question_{idx}"] = user_answer

    # Button to submit all answers at once
    submit_button = st.button("Submit Answers")

    if submit_button:
        score = 0
        # Calculate score based on user answers
        for idx, (_, correct_answer) in enumerate(test_data['questions']):
            if student_answers[f"question_{idx}"] == correct_answer:
                score += 1

        # Display the result
        st.write(f"You got {score} out of {test_data['num_questions']} correct!")
else:
    st.write("Invalid test link or test expired.")